import asyncio
import logging
import os

from aiogram import Dispatcher, types
from aiogram.dispatcher.filters import Text
from aiogram.types import ParseMode
from bs4 import BeautifulSoup
import requests
from datetime import datetime, timedelta
import pytz
from keyboards.client_keyboards import *
from create_bot import dp, bot
from data_base.data_functions import check_copy_apartment
from config import cities, city_chats

HOST = os.getenv('HOST')


# –§–ª–∞–≥ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∏—Å–∫–∞
search_active = False


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start_command(message: types.Message):
    await check_host(message)
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ OLX.ua. –î–ª—è –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞–∂–º–∏  '–ü–æ–∏—Å–∫üîé'",
                        reply_markup=get_menu_keyboard())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å'
async def stop_search_command(message: types.Message):
    await check_host(message)
    global search_active
    if search_active:
        search_active = False
        await message.answer("–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", reply_markup=get_menu_keyboard())
    else:
        await message.answer("–ü–æ–∏—Å–∫ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è", reply_markup=get_menu_keyboard())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã '–ü–æ–∏—Å–∫üîé'
async def search_ads_command(message: types.Message):
    await check_host(message)
    global search_active
    if search_active:
        await message.answer("–ü–æ–∏—Å–∫ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
        return

    await message.answer("–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π...", reply_markup=get_cancel_keyboard())
    search_active = True

    # –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    while search_active:
        try:
            ads_found = await parse_olx_ads()  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            for ad in ads_found:
                print(ad)
                check_flet_in_database = await check_copy_apartment(ad['link'])
                print(f"**{ad['title']}**\n–¶–µ–Ω–∞: {ad['price']}\n–í—Ä–µ–º—è: {ad['time']}\n–õ–æ–∫–∞—Ü–∏—è: {ad['location']}")
                city_location = ad['location']
                print("–õ–û–∫–∞—Ü–∏—è –≥–æ—Ä–æ–¥", city_location[:city_location.find(',')])
                print(city_location.find(','), "—ç—Ç–æ –Ω–æ–º–µ—Ä –∑–∞–ø—è—Ç–æ–π")

                if check_flet_in_database and city_location[:city_location.find(',')] in cities:
                    ad_text = f"**{ad['title']}**\n–¶–µ–Ω–∞: {ad['price']}\n–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {ad['time']}\n–õ–æ–∫–∞—Ü–∏—è: {ad['location']}"
                    await bot.send_photo(chat_id=city_chats[ad['location']],
                                         photo=ad['photo_url'],
                                         caption=ad_text,
                                         parse_mode=ParseMode.MARKDOWN,
                                         reply_markup=get_url_keyboard(ad['link']))
                    await asyncio.sleep(1)
                else:
                    print('–£–∂–µ –≤ —Å–ø–∏—Å–∫–µ')
        except Exception as e:
            logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {e}")

        await asyncio.sleep(5)  # –ñ–¥–µ–º 1.5 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–æ–∏—Å–∫–æ–º
    # –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ–∏—Å–∫–∞
    search_active = False


# –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π OLX.ua
async def parse_olx_ads() -> list:
    ads = []
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∏–µ–≤—Å–∫–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã
    kiev_timezone = pytz.timezone('Europe/Kiev')

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∫–∏–µ–≤—Å–∫–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ
    search_start_time = datetime.now(kiev_timezone)

    # –ó–¥–µ—Å—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–∞—Ä—Å–∏–Ω–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ OLX.ua
    url = f'https://www.olx.ua/uk/nedvizhimost/kvartiry/dolgosrochnaya-arenda-kvartir/' \
          f'?currency=UAH&search%5Bprivate_business%5D=private&search%5Border%5D=created_at:desc'
    response = requests.get(url)
    print(response.status_code)
    soup = BeautifulSoup(response.content, 'lxml')
    ad_items = soup.find_all('div', class_='css-1sw7q4x')

    for ad_item in ad_items[3:7]:
        try:
            location_text = ad_item.find('p', class_='css-veheph er34gjf0').text.strip()
            location = location_text[:location_text.find(' -')]
            link = 'https://www.olx.ua' + ad_item.find('a', class_='css-rc5s2u').get('href')

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ —Å—Å—ã–ª–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            ad_response = requests.get(link)
            ad_soup = BeautifulSoup(ad_response.content, 'lxml')

            publish_time_element = ad_soup.find('span', class_='css-19yf5ek')
            publish_time_list = publish_time_element.text.strip().split()

            # –í—ã—è–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            publish_time = datetime.strptime(publish_time_list[-1], '%H:%M').time()
            datetime_publish_time = datetime.combine(datetime(1900, 1, 1), publish_time)
            new_time = datetime_publish_time + timedelta(hours=3)
            publish_time = new_time.time()

            # –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –Ω–∞—Å –¥–∞–Ω–Ω—ã–µ
            title = ad_item.find('h6', class_='css-16v5mdi er34gjf0').text.strip()
            price = ad_item.find('p', class_='css-10b0gli er34gjf0').text.strip()
            photo_url = ad_soup.find('img', class_='css-1bmvjcs').get('src')

            ads.append({
                'title': title,
                'price': price,
                'link': link,
                'photo_url': photo_url,
                'time': publish_time,
                'location': location
            })
        except Exception as e:
            print("–ë—ã–ª–∞, –æ—à–∏–±–∫–∞", e.args)

    print(ads, sep='\n')
    return ads


async def check_host(message):
    if message.from_user.id != int(HOST):
        await message.answer('–í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü, –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω')
        return


def register_client_handlers(disp: Dispatcher):
    disp.register_message_handler(start_command, commands=['start'])
    disp.register_message_handler(stop_search_command, Text("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"))
    disp.register_message_handler(search_ads_command, Text("–ü–æ–∏—Å–∫üîé"))



